#!/bin/bash
cd ${0%/*} || exit 1    # Run from this directory

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions



#########################
#   STEP 1: MESHING     #
#########################


# Extract stl file of the surface
FILE=./constant/triSurface/Bolund_GeoTIFF_file.stl
if [ ! -f "$FILE" ]; then
    echo "Unpacking BolundGeoTiff.tar.gz"
    cd constant/triSurface
    tar -xzvf Bolund_GeoTIFF.tar.gz
    cd ../../
fi

# Set controlDict, fvSchemes, and fvSolution for the moveMesh solver
mkdir -p 0 && cp 0.original/pointDisplacement 0/
cp system/controlDict.moveMesh system/controlDict
cp system/fvSchemes.moveMesh system/fvSchemes
cp system/fvSolution.moveMesh system/fvSolution
cp system/dynamicMeshDict constant/dynamicMeshDict

# Build the basic mesh
# --------------------
echo 'Running blockMesh'
blockMesh > log.blockMesh 2>&1

# Decompose the mesh (for moveMesh)
# --------------------------------
echo 'Running decomposePar'
decomposePar > log.decomposePar.1 2>&1

# Imprint Bolund Hill into the mesh using moveMesh
# -----------------------------------------------

# Get number of cores from the setUp file
nCores=$(foamDictionary -entry nCores -value setUp)

# Run moveMesh solver
echo 'Running moveMesh'
mpirun -np $nCores moveMesh -parallel > log.moveMesh 2>&1

# Reconstruct the mesh
# --------------------
echo 'Running reconstructPar'
reconstructPar -latestTime > log.reconstructPar.1 2>&1

rm -r processor*

# Mesh refinement near the surface
# --------------------------------

# Set controlDict, fvSchemes, and fvSolution for the simpleFoam solver
# here as refinemesh uses some inputs from controlDict (which differs from
# the moveMesh controlDict)
cp system/controlDict.simpleFoam system/controlDict
cp system/fvSchemes.simpleFoam system/fvSchemes
cp system/fvSolution.simpleFoam system/fvSolution

# Get number of refinement levels from the setUp file
nRefinement=$(foamDictionary -entry nRefinement -value setUp)

# For every refinement level, identify the cells to be refined with
# topoSet and then apply refineMesh
for ((i=1; i<=$nRefinement; i++))
do
    echo "Running topoSet (i=$i)"
    topoSet -latestTime > log.topoSet.$i 2>&1
    
    echo "Running refineMesh (i=$i)"
    refineMesh > log.refineMesh.$i 2>&1
done

# Check mesh quality
# ------------------
echo 'Running checkMesh'
checkMesh -latestTime > log.checkMesh 2>&1



####################################
#   STEP 2: RUNNING THE SOLVER     #
####################################


# Copy over the field variables from the zero folder
# --------------------------------------------------
latestTime=$(foamListTimes -latestTime)
echo "Copying flow variables to $latestTime folder"

cp 0.original/U $latestTime/U
cp 0.original/epsilon $latestTime/epsilon
cp 0.original/k $latestTime/k
cp 0.original/nut $latestTime/nut
cp 0.original/p $latestTime/p

# Set the inflow boundary conditions
# ----------------------------------

# Get wind direction from the setUp file
wDir=$(foamDictionary -entry wDir -value setUp)
if [[ $wDir -eq 0 ]]; then
    wDirName="north"
elif [[ $wDir -gt 0 && $wDir -lt 90 ]]; then
    wDirName="northeast"
elif [[ $wDir -eq 90 ]]; then
    wDirName="east"
elif [[ $wDir -gt 90 && $wDir -lt 180 ]]; then
    wDirName="southeast"
elif [[ $wDir -eq 180 ]]; then
    wDirName="south"
elif [[ $wDir -gt 180 && $wDir -lt 270 ]]; then
    wDirName="southwest"
elif [[ $wDir -eq 270 ]]; then
    wDirName="west"
elif [[ $wDir -gt 270 && $wDir -lt 360 ]]; then
    wDirName="northwest"
else
    echo "Error: Wind direction must be in the range [0,360[" && exit 1
fi

# Run the particular wind direction script to set the boundary conditions
echo "Setting boundary conditions corresponding to inflow from $wDirName"
system/setBCs/setBC.$wDirName

# Renumber mesh
# -------------
echo 'Running renumberMesh'
renumberMesh -latestTime -overwrite > log.renumberMesh 2>&1

# initialize fields?

# Decompose the mesh (for simpleFoam)
# -----------------------------------
echo 'Running decomposePar'
decomposePar -force > log.decomposePar.2 2>&1

# Run simpleFoam
# --------------
# Remove dynamicMeshDict from constant, otherwise simpleFoam does not work
rm constant/dynamicMeshDict

# Run the solver
echo 'Running simpleFoam'
mpirun -np $nCores simpleFoam -parallel > log.simpleFoam 2>&1

# Reconstruct the mesh
# --------------------
echo 'Running reconstructPar'
reconstructPar -latestTime > log.reconstructPar.2 2>&1

# Postprocessing (optional)
# -------------------------
# Extract wind speed at 10-m above ground level
# (takes quite a long time)
# cp system/controlDict.postProcess system/controlDict
# simpleFoam -postProcess -latestTime
